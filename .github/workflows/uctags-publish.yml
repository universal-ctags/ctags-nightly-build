name: publish uctags

on:
  workflow_dispatch:
  schedule:
    - cron: '0 4 * * *'

jobs:

  check:
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - uses: actions/checkout@v3
        with:
          repository: universal-ctags/ctags

      - id:  check-if-has-new-commit
        run: |
          cat > QUERY <<EOF
          {
            repository(owner: "universal-ctags", name: "ctags-nightly-build") {
                latestRelease {
                  name
                }
            }
          }
          EOF

          LATEST_RELEASE_GIT_SHA="$(gh api graphql -f "query=$(cat QUERY)" --jq .data.repository.latestRelease.name | cut -d+ -f2)"

          printf 'LATEST_RELEASE_GIT_SHA=%s\n' "$LATEST_RELEASE_GIT_SHA"

          CURRENT_SOURCE_GIT_SHA="$(git rev-parse HEAD)"

          printf 'CURRENT_SOURCE_GIT_SHA=%s\n' "$CURRENT_SOURCE_GIT_SHA"

          if [ "$LATEST_RELEASE_GIT_SHA" = "$CURRENT_SOURCE_GIT_SHA" ] ; then
              printf 'HAS_NEW_COMMIT=no\n'        >> "$GITHUB_OUTPUT"
          else
              printf 'HAS_NEW_COMMIT=yes\n'       >> "$GITHUB_OUTPUT"
          fi

          printf 'GIT_SHA=%s\n' "$CURRENT_SOURCE_GIT_SHA" >> "$GITHUB_OUTPUT"

    outputs:
      if-has-new-commit: ${{ steps.check-if-has-new-commit.outputs.HAS_NEW_COMMIT }}
      git-sha:           ${{ steps.check-if-has-new-commit.outputs.GIT_SHA }}

  manpages:
    needs: check
    if: needs.check.outputs.if-has-new-commit == 'yes'

    runs-on: ubuntu-latest

    steps:
      - run: pip3 install -U docutils

      - uses: actions/checkout@v3
        with:
          repository: universal-ctags/ctags
          ref: ${{ needs.check.outputs.git-sha }}

      - run: ./autogen.sh
      - run: ./configure
      - run: cd man && make V=1
      - run: |
          V=$(date +%Y.%m.%d)

          DIR="uctags-$V-manpages"

          install -d "$DIR/man/man1/"
          install -d "$DIR/man/man5/"
          install -d "$DIR/man/man7/"

          cp man/*.1 "$DIR/man/man1/"
          cp man/*.5 "$DIR/man/man5/"
          cp man/*.7 "$DIR/man/man7/"

          tar cvJf "$DIR.tar.xz" "$DIR"

      - uses: actions/upload-artifact@v3
        with:
          name: uctags---manpages-tar-xz
          path: uctags-*-manpages.tar.xz

  netbsd-amd64:
    needs: [check, manpages]
    if: needs.check.outputs.if-has-new-commit == 'yes'

    runs-on: macos-12

    steps:
      - uses: leleliu008/github-actions-vagrant@main
        with:
          mem: 2048
          box: generic/netbsd9
          run: |
            export HOME=/home/vagrant

            run sudo sed -i 's/#ETCCERTSDIR=/ETCCERTSDIR=/' /usr/pkg/etc/ca-certificates-dir.conf
            run sudo update-ca-certificates

            unset ETCCERTSDIR

            ETCCERTSDIR=$(sed -n '/^ETCCERTSDIR=/p' /usr/pkg/etc/ca-certificates-dir.conf | sed 's|ETCCERTSDIR=\(.*\)|\1|')

            if [ -n "$ETCCERTSDIR" ] ; then
                export SSL_CERT_FILE="$ETCCERTSDIR/ca-certificates.crt"
            fi

            run sudo pkgin -y update
            run sudo pkgin -y install llvm

            run curl -LO https://raw.githubusercontent.com/leleliu008/ppkg/master/ppkg
            run chmod a+x ppkg
            run ./ppkg setup
            run ./ppkg update

            ~/.uppm/installed/gsed/bin/gsed -i "/git-url/a git-sha: ${{ needs.check.outputs.git-sha }}" ~/.ppkg/repos.d/offical-core/formula/uctags.yml

            run ./ppkg install uctags --link-type=static-only --install-lib=static
            run ./ppkg pack    uctags

      - run: scp -i $VAGRANT_CWD/.vagrant/machines/default/virtualbox/private_key -o StrictHostKeyChecking=no -r -P 2222 vagrant@127.0.0.1:/home/vagrant/.ppkg/packed/uctags-*-netbsd-amd64.tar.xz .

      - uses: actions/upload-artifact@v3
        with:
          name: uctags---netbsd-amd64-tar-xz
          path: uctags-*-netbsd-amd64.tar.xz

  openbsd-amd64:
    needs: [check, netbsd-amd64]
    if: needs.check.outputs.if-has-new-commit == 'yes'

    runs-on: macos-12

    steps:
      - run: brew install openssh

      - uses: leleliu008/github-actions-vagrant@main
        with:
          mem: 2048
          box: generic/openbsd7
          run: |
            run sudo pkg_add curl gtar-- gcc%11

            run sudo ln -s /usr/local/bin/gtar /usr/bin/tar

            export HOME=/home/vagrant
            export LD_LIBRARY_PATH=/usr/local/lib

            run curl -LO https://raw.githubusercontent.com/leleliu008/ppkg/master/ppkg
            run chmod a+x ppkg
            run ./ppkg setup
            run ./ppkg update

            ~/.uppm/installed/gsed/bin/gsed -i "/git-url/a git-sha: ${{ needs.check.outputs.git-sha }}" ~/.ppkg/repos.d/offical-core/formula/uctags.yml

            run ./ppkg install uctags --link-type=static-only --install-lib=static
            run ./ppkg pack    uctags

      - run: scp -i $VAGRANT_CWD/.vagrant/machines/default/virtualbox/private_key -o StrictHostKeyChecking=no -r -P 2222 vagrant@127.0.0.1:/home/vagrant/.ppkg/packed/uctags-*-openbsd-amd64.tar.xz .

      - uses: actions/upload-artifact@v3
        with:
          name: uctags---openbsd-amd64-tar-xz
          path: uctags-*-openbsd-amd64.tar.xz

  freebsd-amd64:
    needs: [check, openbsd-amd64]
    if: needs.check.outputs.if-has-new-commit == 'yes'

    runs-on: macos-12

    steps:
      - uses: leleliu008/github-actions-vagrant@main
        with:
          mem: 2048
          box: generic/freebsd13
          run: |
            export HOME=/home/vagrant

            run pkg update
            run pkg install -y gcc curl libnghttp2

            run curl -LO https://raw.githubusercontent.com/leleliu008/ppkg/master/ppkg
            run chmod a+x ppkg
            run ./ppkg setup
            run ./ppkg update

            ~/.uppm/installed/gsed/bin/gsed -i "/git-url/a git-sha: ${{ needs.check.outputs.git-sha }}" ~/.ppkg/repos.d/offical-core/formula/uctags.yml

            run ./ppkg install uctags --link-type=static-only --install-lib=static
            run ./ppkg pack    uctags

      - run: scp -i $VAGRANT_CWD/.vagrant/machines/default/virtualbox/private_key -o StrictHostKeyChecking=no -r -P 2222 vagrant@127.0.0.1:/home/vagrant/.ppkg/packed/uctags-*-freebsd-amd64.tar.xz .

      - uses: actions/upload-artifact@v3
        with:
          name: uctags---freebsd-amd64-tar-xz
          path: uctags-*-freebsd-amd64.tar.xz

  macos:
    needs: [check, freebsd-amd64]
    if: needs.check.outputs.if-has-new-commit == 'yes'

    runs-on: macos-12

    strategy:
      fail-fast: false
      matrix:
        target-version: ['11.0', '12.0', '13.0']
        target-arch: [x86_64, arm64]

    steps:
      - run: curl -LO https://raw.githubusercontent.com/leleliu008/xcpkg/master/xcpkg
      - run: chmod a+x xcpkg
      - run: ./xcpkg setup
      - run: ./xcpkg update

      - run: |
          ~/.uppm/installed/gsed/bin/gsed -i "/git-url/a git-sha: ${{ needs.check.outputs.git-sha }}" ~/.xcpkg/repos.d/offical-core/formula/uctags.yml

      - run: ./xcpkg install uctags:MacOSX:${{ matrix.target-version }}:${{ matrix.target-arch }} --link-type=static-prefered --install-lib=static
      - run: ./xcpkg pack    uctags:MacOSX:${{ matrix.target-version }}:${{ matrix.target-arch }} -o .

      - uses: actions/upload-artifact@v3
        with:
          name: uctags-macos${{ matrix.target-version }}-${{ matrix.target-arch }}-tar-xz
          path: uctags-*.tar.xz

  linux-aarch64:
    needs: [check, macos]
    if: needs.check.outputs.if-has-new-commit == 'yes'

    runs-on: ubuntu-latest

    steps:
      - run: |
          cat > run.sh <<EOF
          set -e

          COLOR_GREEN='\033[0;32m'        # Green
          COLOR_PURPLE='\033[0;35m'       # Purple
          COLOR_OFF='\033[0m'             # Reset

          echo() {
              printf '%b\n' "\$*"
          }

          run() {
              echo "\${COLOR_PURPLE}==>\${COLOR_OFF} \${COLOR_GREEN}\$@\${COLOR_OFF}"
              eval "\$*"
          }

          run uname -a

          run apk update
          run apk add g++ libc-dev linux-headers

          run wget https://raw.githubusercontent.com/leleliu008/ppkg/master/ppkg
          run chmod a+x ppkg
          run ./ppkg setup
          run ./ppkg update

          sed -i "/git-url/a git-sha: ${{ needs.check.outputs.git-sha }}" ~/.ppkg/repos.d/offical-core/formula/uctags.yml

          run ./ppkg install uctags gh --link-type=static-only --install-lib=static
          run ./ppkg pack    uctags -o .
          EOF

          chmod +x run.sh

      # https://github.com/multiarch/qemu-user-static
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - run: docker run -v $PWD:$PWD -w $PWD --name alpine arm64v8/alpine sh run.sh

      - run: ls

      - uses: actions/upload-artifact@v3
        with:
          name: uctags---linux-aarch64-tar-xz
          path: uctags-*-linux-aarch64.tar.xz

  linux-x86_64:
    needs: [check, linux-aarch64]
    if: needs.check.outputs.if-has-new-commit == 'yes'

    runs-on: ubuntu-latest

    container: alpine:3.16

    steps:
      - run: apk update
      - run: apk add g++ libc-dev linux-headers

      - run: wget https://raw.githubusercontent.com/leleliu008/ppkg/master/ppkg
      - run: chmod a+x ppkg
      - run: ./ppkg setup
      - run: ./ppkg update

      - run: |
          sed -i "/git-url/a git-sha: ${{ needs.check.outputs.git-sha }}" ~/.ppkg/repos.d/offical-core/formula/uctags.yml

      - run: ./ppkg install uctags --link-type=static-only --install-lib=static
      - run: ./ppkg pack    uctags -o .

      - uses: actions/upload-artifact@v3
        with:
          name: uctags---linux-x86_64-tar-xz
          path: uctags-*-linux-x86_64.tar.xz


  publish:
    needs: [check, linux-x86_64]
    if: needs.check.outputs.if-has-new-commit == 'yes'

    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - uses: actions/download-artifact@v3
        with:
          name: uctags---netbsd-amd64-tar-xz
          path: .

      - uses: actions/download-artifact@v3
        with:
          name: uctags---openbsd-amd64-tar-xz
          path: .

      - uses: actions/download-artifact@v3
        with:
          name: uctags---freebsd-amd64-tar-xz
          path: .

      - uses: actions/download-artifact@v3
        with:
          name: uctags-macos11.0-x86_64-tar-xz
          path: .

      - uses: actions/download-artifact@v3
        with:
          name: uctags-macos12.0-x86_64-tar-xz
          path: .

      - uses: actions/download-artifact@v3
        with:
          name: uctags-macos13.0-x86_64-tar-xz
          path: .

      - uses: actions/download-artifact@v3
        with:
          name: uctags-macos11.0-arm64-tar-xz
          path: .

      - uses: actions/download-artifact@v3
        with:
          name: uctags-macos12.0-arm64-tar-xz
          path: .

      - uses: actions/download-artifact@v3
        with:
          name: uctags-macos13.0-arm64-tar-xz
          path: .

      - uses: actions/download-artifact@v3
        with:
          name: uctags---linux-aarch64-tar-xz
          path: .

      - uses: actions/download-artifact@v3
        with:
          name: uctags---linux-x86_64-tar-xz
          path: .

      - uses: actions/download-artifact@v3
        with:
          name: uctags---manpages-tar-xz
          path: .

      - run: ls -a

      - run: |
          printf 'build-from: https://github.com/universal-ctags/ctags/tree/%s\n\n' ${{ needs.check.outputs.git-sha }} > notes.md
          printf 'sha256sum:\n```\n%s\n```\n' "$(sha256sum uctags-*.tar.xz)" >> notes.md

          VERSION="$(ls uctags-*-linux-x86_64.tar.xz | cut -d- -f2)"
          TAGNAME="$VERSION+${{ needs.check.outputs.git-sha }}"

          # to avaid: failed to run git: fatal: not a git repository (or any of the parent directories): .git
          git -c init.defaultBranch=master init
          git remote add origin ${{ github.repositoryUrl }}

          gh release create "$TAGNAME" uctags-*.tar.xz --title "$TAGNAME" --notes-file notes.md
