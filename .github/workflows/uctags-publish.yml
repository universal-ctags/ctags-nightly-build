name: publish uctags

on:
  workflow_dispatch:
  schedule:
    - cron: '0 4 * * *'

jobs:

  check:
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - uses: actions/checkout@v4
        with:
          repository: universal-ctags/ctags

      - id:  check-if-has-new-commit
        run: |
          cat > QUERY <<EOF
          {
            repository(owner: "universal-ctags", name: "ctags-nightly-build") {
                latestRelease {
                  name
                }
            }
          }
          EOF

          LATEST_RELEASE_GIT_SHA="$(gh api graphql -f "query=$(cat QUERY)" --jq .data.repository.latestRelease.name | cut -d+ -f2)"

          printf 'LATEST_RELEASE_GIT_SHA=%s\n' "$LATEST_RELEASE_GIT_SHA"

          CURRENT_SOURCE_GIT_SHA="$(git rev-parse HEAD)"

          printf 'CURRENT_SOURCE_GIT_SHA=%s\n' "$CURRENT_SOURCE_GIT_SHA"

          if [ "$LATEST_RELEASE_GIT_SHA" = "$CURRENT_SOURCE_GIT_SHA" ] ; then
              printf 'HAS_NEW_COMMIT=no\n'        >> "$GITHUB_OUTPUT"
          else
              printf 'HAS_NEW_COMMIT=yes\n'       >> "$GITHUB_OUTPUT"
          fi

          printf 'GIT_SHA=%s\n' "$CURRENT_SOURCE_GIT_SHA" >> "$GITHUB_OUTPUT"

    outputs:
      if-has-new-commit: ${{ steps.check-if-has-new-commit.outputs.HAS_NEW_COMMIT }}
      git-sha:           ${{ steps.check-if-has-new-commit.outputs.GIT_SHA }}

  manpages:
    needs: check
    if: needs.check.outputs.if-has-new-commit == 'yes'

    runs-on: ubuntu-latest

    steps:
      - run: pip3 install -U docutils

      - uses: actions/checkout@v4
        with:
          repository: universal-ctags/ctags
          ref: ${{ needs.check.outputs.git-sha }}

      - run: ./autogen.sh
      - run: ./configure
      - run: cd man && make V=1
      - run: |
          install -d manpages/man/man1/
          install -d manpages/man/man5/
          install -d manpages/man/man7/

          cp man/*.1 manpages/man/man1/
          cp man/*.5 manpages/man/man5/
          cp man/*.7 manpages/man/man7/

          tar cvJf manpages.tar.xz manpages

      - uses: actions/upload-artifact@v4
        with:
          name: manpages
          path: manpages.tar.xz

  bsd:
    needs: [check]
    if: needs.check.outputs.if-has-new-commit == 'yes'

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        # https://ftp.netbsd.org/pub/NetBSD/
        # https://cdn.openbsd.org/pub/OpenBSD/
        # https://archive.freebsd.org/old-releases/amd64/
        target: ['netbsd-9.1-amd64', 'netbsd-9.2-amd64', 'netbsd-9.3-amd64', 'openbsd-7.4-amd64', 'openbsd-7.3-amd64', 'freebsd-13.2-amd64', 'freebsd-13.1-amd64', 'freebsd-13.0-amd64']

    steps:
      - run: curl -LO https://raw.githubusercontent.com/leleliu008/ppkg/master/ppkg
      - run: chmod a+x ppkg
      - run: ./ppkg setup
      - run: ./ppkg update

      - run: |
          ~/.ppkg/uppm/installed/gsed/bin/gsed -i "/git-url/a git-sha: ${{ needs.check.outputs.git-sha }}" ~/.ppkg/repos.d/official-core/formula/uctags.yml

      - if:  ${{ startsWith(matrix.target, 'openbsd') }}
        run: ./ppkg install ${{ matrix.target }}/uctags --link-type=static-most

      - if:  ${{ ! startsWith(matrix.target, 'openbsd') }}
        run: ./ppkg install ${{ matrix.target }}/uctags --link-type=static-full

      - run: ./ppkg pack    ${{ matrix.target }}/uctags

      - uses: actions/upload-artifact@v4
        with:
          name: uctags---${{ matrix.target }}-tar-xz
          path: uctags-*-${{ matrix.target }}.tar.xz


  macos:
    needs: check
    if: needs.check.outputs.if-has-new-commit == 'yes'

    runs-on: macos-14

    strategy:
      fail-fast: false
      matrix:
        target-version: ['11.0', '12.0', '13.0', '14.0']
        target-arch: [x86_64, arm64]

    steps:
      - run: curl -LO https://raw.githubusercontent.com/leleliu008/xcpkg/master/xcpkg
      - run: chmod a+x xcpkg
      - run: ./xcpkg setup
      - run: ./xcpkg update

      - run: |
          ~/.uppm/installed/gsed/bin/gsed -i "/git-url/a git-sha: ${{ needs.check.outputs.git-sha }}" ~/.xcpkg/repos.d/official-core/formula/uctags.yml

      - run: ./xcpkg install MacOSX-${{ matrix.target-version }}-${{ matrix.target-arch }}/uctags --link-type=static-most
      - run: ./xcpkg pack    MacOSX-${{ matrix.target-version }}-${{ matrix.target-arch }}/uctags

      - uses: actions/upload-artifact@v4
        with:
          name: uctags-macos${{ matrix.target-version }}-${{ matrix.target-arch }}-tar-xz
          path: uctags-*.tar.xz


  linux:
    needs: check
    if: needs.check.outputs.if-has-new-commit == 'yes'

    strategy:
      fail-fast: false
      matrix:
        target-arch: [x86_64, aarch64]

    runs-on: ubuntu-latest

    steps:
      - run: |
          cat > run.sh <<EOF
          set -e

          COLOR_GREEN='\033[0;32m'        # Green
          COLOR_PURPLE='\033[0;35m'       # Purple
          COLOR_OFF='\033[0m'             # Reset

          echo() {
              printf '%b\n' "\$*"
          }

          run() {
              echo "\${COLOR_PURPLE}==>\${COLOR_OFF} \${COLOR_GREEN}\$@\${COLOR_OFF}"
              eval "\$*"
          }

          run uname -a

          run apk update
          run apk add g++ libc-dev linux-headers

          run wget https://raw.githubusercontent.com/leleliu008/ppkg/master/ppkg
          run chmod a+x ppkg
          run ./ppkg setup
          run ./ppkg update

          sed -i "/git-url/a git-sha: ${{ needs.check.outputs.git-sha }}" ~/.ppkg/repos.d/official-core/formula/uctags.yml

          run ./ppkg install uctags --link-type=static-full
          run ./ppkg pack    uctags
          EOF

          chmod +x run.sh

      # https://github.com/multiarch/qemu-user-static
      - if: matrix.target-arch != x86_64
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - if: matrix.target-arch == x86_64
        run: docker run -v $PWD:$PWD -w $PWD --name alpine         alpine sh run.sh

      - if: matrix.target-arch == aarch64
        run: docker run -v $PWD:$PWD -w $PWD --name alpine arm64v8/alpine sh run.sh

      - run: ls

      - uses: actions/upload-artifact@v4
        with:
          name: uctags---linux-${{ matrix.target-arch }}-tar-xz
          path: uctags-*-linux-${{ matrix.target-arch }}.tar.xz


  publish:
    needs: [check, manpages, bsd, macos, linux]
    if: needs.check.outputs.if-has-new-commit == 'yes'

    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: '*'
          path: .
          merge-multiple: true

      - run: ls -a

      - name: repack
        run: |
          set -x

          for FILENAME in uctags-*.tar.xz
          do
            DIR_NAME="${FILENAME%.tar.xz}"

            tar xvf "$FILENAME"
            tar xvf manpages.tar.xz -C "$DIR_NAME"
            tar cJvf "$FILENAME" "$DIR_NAME"
          done

      - run: |
          printf 'build-from: https://github.com/universal-ctags/ctags/tree/%s\n\n' ${{ needs.check.outputs.git-sha }} > notes.md
          printf 'sha256sum:\n```\n%s\n```\n' "$(sha256sum uctags-*.tar.xz)" >> notes.md

          VERSION="$(ls uctags-*-linux-x86_64.tar.xz | cut -d- -f2)"
          TAGNAME="$VERSION+${{ needs.check.outputs.git-sha }}"

          # to avaid: failed to run git: fatal: not a git repository (or any of the parent directories): .git
          git -c init.defaultBranch=master init
          git remote add origin ${{ github.repositoryUrl }}

          gh release create "$TAGNAME" uctags-*.tar.xz --title "$TAGNAME" --notes-file notes.md
